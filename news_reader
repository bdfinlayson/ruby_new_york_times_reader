require 'rubygems'
require 'mechanize'
require 'nokogiri'
require 'open-uri'
require 'pry'

class Reader
  BADLINKS = [
    'interactive',
    'video',
    'facebook',
    'twitter',
    'rss',
    'membercenter',
    'mediakit',
    'terms-of-sale',
    'nytco',
    '/rss',
    'sitehelp',
    'spiderbites',
    'copyright-notice',
    'congress/votes',
    'elections/results',
    'pages/realestate',
    'pages/automobiles',
    'pages/technology',
    'todayspaper',
    '/adx/bin/',
    'rss',
    'newyorktimes-poll-watch',
    'news-event',
    'topics.nytimes.com'
  ]

  attr_accessor :links

  def initialize
    @links
  end

  def get_links
    @links = get_links_from usr_select_category
    run
  end

  private

  def run
    get_story
    read_story
    read_another?
  end

  def usr_select_category
    directions = <<-EOS
    Please choose a category:
      business
      health
      national
      opinion
      politics
      science
      technology
      world
    EOS
    print directions
    gets.chomp
  end

  def get_links_from(category)
    page = Nokogiri::HTML(open("http://www.nytimes.com/pages/#{category}/index.html"))

    goodlinks = Array.new

    puts "Finding story links..."

    page.css('a').each do |a|
      begin
        raise if a.attributes["href"].nil?
        link = a.attributes["href"].value
        raise if link.length < 50
        raise if link.length > 150
        BADLINKS.each do |bl|
          raise if link.include? bl
        end
        goodlinks.push link
      rescue
        # puts "Skipping link..."
      end
    end
    goodlinks.uniq!
    puts "Found #{goodlinks.count} stories to read!"
    goodlinks
  end

  def get_story
    random_page = @links.sample
    puts "Here is your random link! #{random_page}"
    puts "Scraping content now..."
    agent = Mechanize.new { |a| a.user_agent_alias = "Mac Safari" }

    agent.get(random_page) do |p|
      headline = p.search("#headline")
      story = p.search(".story-body-text")
      open("random_story.txt", 'w') do |f|
        f << headline.children.text + "\n"
        f << " ... \n"
        story.each do |story_body|
          f << story_body.children.text + "\n"
        end
      end
    end
  end

  def read_story
    puts "Reading now..."
    File.open('random_story.txt', 'r') do |f|
      f.each_line do |line|
        puts line
        `say #{line}`
      end
    end
  end

  def read_another?
    puts "Would you like to hear another story from this category? (y / n)"
    answer = gets.chomp
    if answer.eql? 'y'
      run
    else
      puts "Would you like to choose a different category? (y / n)"
      answer = gets.chomp
      if answer.eql? 'y'
        get_links
      else
        puts "Okay! Thanks for listening!"
      end
    end
  end
end

Reader.new.get_links
